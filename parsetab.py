
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDnonassocINFSUPBOOLEQUALINFEQUALSUPEQUALleftPLUSMINUSleftTIMESDIVIDEAND BOOLEQUAL COMA DIVIDE ELSE EQUALS FOR FUNC IF INF INFEQUAL LACCOLADE LPAREN MINUS NAME NUMBER OR PLUS PRINT PRINTSTR RACCOLADE RETURN RPAREN SEMI SUP SUPEQUAL TIMES WHILEstart : bloc bloc : bloc statement SEMI\n            | statement SEMIstatement : NAME EQUALS expressionstatement : PRINT LPAREN expression RPARENstatement : PRINTSTR LPAREN strings RPARENstatement : IF LPAREN expression RPAREN LACCOLADE bloc RACCOLADEstatement : WHILE LPAREN expression RPAREN LACCOLADE bloc RACCOLADEstatement : FOR LPAREN NAME EQUALS expression SEMI expression SEMI NAME EQUALS expression RPAREN LACCOLADE bloc RACCOLADEstatement : FUNC NAME LPAREN RPAREN LACCOLADE bloc RACCOLADE\n                 | FUNC NAME LPAREN param RPAREN LACCOLADE bloc RACCOLADEstatement : NAME LPAREN RPAREN\n                 | NAME LPAREN expression RPARENexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression INF expression \n                  | expression SUP expression\n                  | expression INFEQUAL expression \n                  | expression SUPEQUAL expression \n                  | expression AND expression \n                  | expression OR expression\n                  | expression BOOLEQUAL expression expression : MINUS expressionexpression : expression COMA expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEparam : NAME COMA param\n             | NAMEstrings : NAME strings\n               | NAME'
    
_lr_action_items = {'NAME':([0,2,10,12,13,14,15,16,17,18,19,21,24,25,31,35,36,37,38,39,40,41,42,43,44,45,46,47,56,73,74,76,77,79,80,81,83,84,89,90,93,96,97,],[4,4,20,-3,22,22,22,31,22,22,34,-2,22,22,31,57,22,22,22,22,22,22,22,22,22,22,22,22,22,4,4,57,4,4,4,22,4,4,4,92,22,4,4,]),'PRINT':([0,2,12,21,73,74,77,79,80,83,84,89,96,97,],[5,5,-3,-2,5,5,5,5,5,5,5,5,5,5,]),'PRINTSTR':([0,2,12,21,73,74,77,79,80,83,84,89,96,97,],[6,6,-3,-2,6,6,6,6,6,6,6,6,6,6,]),'IF':([0,2,12,21,73,74,77,79,80,83,84,89,96,97,],[7,7,-3,-2,7,7,7,7,7,7,7,7,7,7,]),'WHILE':([0,2,12,21,73,74,77,79,80,83,84,89,96,97,],[8,8,-3,-2,8,8,8,8,8,8,8,8,8,8,]),'FOR':([0,2,12,21,73,74,77,79,80,83,84,89,96,97,],[9,9,-3,-2,9,9,9,9,9,9,9,9,9,9,]),'FUNC':([0,2,12,21,73,74,77,79,80,83,84,89,96,97,],[10,10,-3,-2,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,2,12,21,],[0,-1,-3,-2,]),'SEMI':([3,11,22,23,26,27,48,50,51,52,60,61,62,63,64,65,66,67,68,69,70,71,72,75,85,86,87,88,91,98,],[12,21,-29,-4,-28,-12,-25,-13,-5,-6,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-26,-27,81,-7,-8,90,-10,-11,-9,]),'EQUALS':([4,34,92,],[13,56,93,]),'LPAREN':([4,5,6,7,8,9,13,14,15,17,18,20,24,25,36,37,38,39,40,41,42,43,44,45,46,47,56,81,93,],[14,15,16,17,18,19,25,25,25,25,25,35,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'RACCOLADE':([12,21,79,80,83,89,97,],[-3,-2,85,86,88,91,98,]),'MINUS':([13,14,15,17,18,22,23,24,25,26,28,29,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,56,60,61,62,63,64,65,66,67,68,69,70,71,72,75,81,87,93,94,],[24,24,24,24,24,-29,37,24,24,-28,37,37,37,37,24,24,24,24,24,24,24,24,24,24,24,24,-25,37,24,-14,-15,-16,-17,37,37,37,37,37,37,37,37,-27,37,24,37,24,37,]),'NUMBER':([13,14,15,17,18,24,25,36,37,38,39,40,41,42,43,44,45,46,47,56,81,93,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'RPAREN':([14,22,26,28,29,30,31,32,33,35,48,49,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,82,94,],[27,-29,-28,50,51,52,-33,54,55,58,-25,72,-32,-31,78,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-26,-27,-30,95,]),'PLUS':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,36,-28,36,36,36,36,-25,36,-14,-15,-16,-17,36,36,36,36,36,36,36,36,-27,36,36,36,]),'TIMES':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,38,-28,38,38,38,38,38,38,38,38,-16,-17,38,38,38,38,38,38,38,38,-27,38,38,38,]),'DIVIDE':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,39,-28,39,39,39,39,39,39,39,39,-16,-17,39,39,39,39,39,39,39,39,-27,39,39,39,]),'INF':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,40,-28,40,40,40,40,-25,40,-14,-15,-16,-17,None,None,None,None,40,40,None,40,-27,40,40,40,]),'SUP':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,41,-28,41,41,41,41,-25,41,-14,-15,-16,-17,None,None,None,None,41,41,None,41,-27,41,41,41,]),'INFEQUAL':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,42,-28,42,42,42,42,-25,42,-14,-15,-16,-17,None,None,None,None,42,42,None,42,-27,42,42,42,]),'SUPEQUAL':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,43,-28,43,43,43,43,-25,43,-14,-15,-16,-17,None,None,None,None,43,43,None,43,-27,43,43,43,]),'AND':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,44,-28,44,44,44,44,-25,44,-14,-15,-16,-17,-18,-19,-20,-21,-22,44,-24,44,-27,44,44,44,]),'OR':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,45,-28,45,45,45,45,-25,45,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,45,-27,45,45,45,]),'BOOLEQUAL':([22,23,26,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,46,-28,46,46,46,46,-25,46,-14,-15,-16,-17,None,None,None,None,46,46,None,46,-27,46,46,46,]),'COMA':([22,23,26,28,29,32,33,48,49,57,60,61,62,63,64,65,66,67,68,69,70,71,72,75,87,94,],[-29,47,-28,47,47,47,47,-25,47,76,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,47,-27,47,47,47,]),'LACCOLADE':([54,55,58,78,95,],[73,74,77,84,96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'bloc':([0,73,74,77,84,96,],[2,79,80,83,89,97,]),'statement':([0,2,73,74,77,79,80,83,84,89,96,97,],[3,11,3,3,3,11,11,11,3,11,3,11,]),'expression':([13,14,15,17,18,24,25,36,37,38,39,40,41,42,43,44,45,46,47,56,81,93,],[23,28,29,32,33,48,49,60,61,62,63,64,65,66,67,68,69,70,71,75,87,94,]),'strings':([16,31,],[30,53,]),'param':([35,76,],[59,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> bloc','start',1,'p_start','TP1_sans_precedence.py',220),
  ('bloc -> bloc statement SEMI','bloc',3,'p_bloc','TP1_sans_precedence.py',228),
  ('bloc -> statement SEMI','bloc',2,'p_bloc','TP1_sans_precedence.py',229),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','TP1_sans_precedence.py',236),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement_expr','TP1_sans_precedence.py',240),
  ('statement -> PRINTSTR LPAREN strings RPAREN','statement',4,'p_statement_print_str','TP1_sans_precedence.py',244),
  ('statement -> IF LPAREN expression RPAREN LACCOLADE bloc RACCOLADE','statement',7,'p_statement_if','TP1_sans_precedence.py',249),
  ('statement -> WHILE LPAREN expression RPAREN LACCOLADE bloc RACCOLADE','statement',7,'p_statement_while','TP1_sans_precedence.py',253),
  ('statement -> FOR LPAREN NAME EQUALS expression SEMI expression SEMI NAME EQUALS expression RPAREN LACCOLADE bloc RACCOLADE','statement',15,'p_statement_for','TP1_sans_precedence.py',257),
  ('statement -> FUNC NAME LPAREN RPAREN LACCOLADE bloc RACCOLADE','statement',7,'p_statement_funct','TP1_sans_precedence.py',261),
  ('statement -> FUNC NAME LPAREN param RPAREN LACCOLADE bloc RACCOLADE','statement',8,'p_statement_funct','TP1_sans_precedence.py',262),
  ('statement -> NAME LPAREN RPAREN','statement',3,'p_statement_call_function','TP1_sans_precedence.py',268),
  ('statement -> NAME LPAREN expression RPAREN','statement',4,'p_statement_call_function','TP1_sans_precedence.py',269),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',275),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',276),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',277),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',278),
  ('expression -> expression INF expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',279),
  ('expression -> expression SUP expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',280),
  ('expression -> expression INFEQUAL expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',281),
  ('expression -> expression SUPEQUAL expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',282),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',283),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',284),
  ('expression -> expression BOOLEQUAL expression','expression',3,'p_expression_binop','TP1_sans_precedence.py',285),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','TP1_sans_precedence.py',290),
  ('expression -> expression COMA expression','expression',3,'p_expression_suite','TP1_sans_precedence.py',294),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','TP1_sans_precedence.py',298),
  ('expression -> NUMBER','expression',1,'p_expression_number','TP1_sans_precedence.py',302),
  ('expression -> NAME','expression',1,'p_expression_name','TP1_sans_precedence.py',306),
  ('param -> NAME COMA param','param',3,'p_param_funct','TP1_sans_precedence.py',310),
  ('param -> NAME','param',1,'p_param_funct','TP1_sans_precedence.py',311),
  ('strings -> NAME strings','strings',2,'p_print_name','TP1_sans_precedence.py',316),
  ('strings -> NAME','strings',1,'p_print_name','TP1_sans_precedence.py',317),
]
